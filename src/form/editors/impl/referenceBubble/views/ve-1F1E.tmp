/**
 * Developer: Stepan Burguchev
 * Date: 5/13/2015
 * Copyright: 2009-2015 Comindwareï¿½
 *       All Rights Reserved
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Comindware
 *       The copyright notice above does not evidence any
 *       actual or intended publication of such source code.
 */

/* global define, require, Handlebars, Backbone, Marionette, $, _ */

define(['modules/lib/index',
        'modules/core',
        'text!../../referenceBubble/templates/referencePanel.html'
    ],
    function (utils, core, template) {
        'use strict';

        var config = {
            CHILD_HEIGHT: 30,
            TEXT_FETCH_DELAY: 300
        };

        return Marionette.LayoutView.extend({
            initialize: function (options) {
                core.utils.helpers.ensureOption(options, 'model');
                core.utils.helpers.ensureOption(options, 'reqres');

                this.reqres = options.reqres;

                this.fetchDelayId = _.uniqueId('fetch-delay-id-');
            },

            className: 'dd-list dd-list_reference',

            template: Handlebars.compile(template),

            regions: {
                listRegion: '.js-list-region',
                scrollbarRegion: '.js-scrollbar-region',
                loadingRegion: '.js-loading-region'
            },

            handleCommand: function(command, options) {
                switch (command) {
                case 'up':
                    this.listView.moveCursorBy(-1, false);
                    break;
                case 'down':
                    this.listView.moveCursorBy(1, false);
                    break;
                case 'filter':
                    this.__filter(options.textFragment);
                    break;
                }
            },

            onShow: function () {
                var result = core.list.factory.createDefaultList({
                    collection: this.model.get('collection'),
                    listViewOptions: {
                        childViewSelector: function (model) {
                            return model instanceof core.form.editors.reference.models.SearchMoreModel ?
                                core.form.editors.reference.views.SearchMoreListItemView :
                                core.form.editors.reference.views.ReferenceListItemView;
                        },
                        childViewOptions: {
                            reqres: this.reqres
                        },
                        childHeight: config.CHILD_HEIGHT
                    }
                });

                this.listView = result.listView;
                this.eventAggregator = result.eventAggregator;

                this.listRegion.show(result.listView);
                this.scrollbarRegion.show(result.scrollbarView);

                this.__filter(null);
            },

            __filter: function (textFragment) {
                this.__setLoading(true);
                var collection = this.model.get('collection');
                collection.deselect();
                this.reqres.request('filter:text', {
                    text: textFragment
                }).then(function () {
                    if (collection.length > 0) {
                        var model = collection.at(0);
                        model.select();
                        this.eventAggregator.scrollTo(model);
                    }
                    var totalCount = this.model.get('totalCount');
                    var searchModel = collection.find(function (m) {
                        return m instanceof core.form.editors.reference.models.SearchMoreModel;
                    });
                    if (searchModel) {
                        collection.remove(searchModel);
                    }
                    if (collection.length < totalCount) {
                        searchModel = new core.form.editors.reference.models.SearchMoreModel({
                            totalCount: this.model.get('totalCount')
                        });
                        collection.add(searchModel, {
                            delayed: false
                        });
                    }
                    this.__setLoading(false);
                }.bind(this));
            },

            __setLoading: function (isLoading) {
                if (this.isDestroyed) {
                    return false;
                }
                this.isLoading = isLoading;
                if (isLoading) {
                    this.loadingRegion.show(new core.form.editors.reference.views.LoadingView());
                } else {
                    this.loadingRegion.reset();
                }
            }
        });
    });
